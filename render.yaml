databases:
  - name: graphleague_db
    plan: starter
    databaseName: graphleague
    user: graphleague

services:
  - type: worker
    name: celery-worker
    region: oregon
    runtime: python
    buildCommand: "pip install -r requirements.txt"
    startCommand: "celery --app graphleague.celery_app worker --loglevel info --concurrency 4"
    autoDeploy: false
    envVars:
      - key: CELERY_BROKER_URL
        fromService:
          name: celery-redis
          type: redis
          property: connectionString
  - type: web
    plan: starter
    name: graphleague
    runtime: python
    buildCommand: "./build.sh"
    startCommand: "python -m gunicorn graphleague.asgi:application -k uvicorn.workers.UvicornWorker"
    envVars:
      - key: DATABASE_URL
        fromDatabase:
          name: graphleague_db
          property: connectionString
      - key: CELERY_BROKER_URL
        fromService:
          name: celery-redis
          type: redis
          property: connectionString
      - key: SECRET_KEY
        generateValue: true
      - key: WEB_CONCURRENCY
        value: 4
  - type: web
    name: flower
    region: oregon
    plan: free
    runtime: python
    buildCommand: "pip install -r requirements.txt"
    startCommand: "celery flower --app graphleague.celery_app tasks --loglevel info"
    autoDeploy: false
    envVars:
      - key: CELERY_BROKER_URL
        fromService:
          type: redis
          name: celery-redis
          property: connectionString
  - type: redis
    name: celery-redis
    region: oregon
    plan: starter # we choose a plan with persistence to ensure tasks are not lost upon restart
    maxmemoryPolicy: noeviction # recommended policy for queues
    ipAllowList: [ ] # only allow internal connections